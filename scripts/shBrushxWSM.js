SyntaxHighlighter.brushes.xwsm = function () {
    this.regexList = [
        { regex: /&lt;%([^!])+?%&gt;/gm, css: 'xplaceholder' },
        { regex: /&lt;!(\/?)IoRangeNavigation&gt;/gm, css: 'xblockmark-navigation' },
        { regex: /&lt;!(\/?)IoRangeNavigationArea&gt;/gm, css: 'xblockmark-navigation' },
        { regex: /&lt;!(\/?)IoRangeIf&gt;/gm, css: 'xblockmark-condition' },
        { regex: /&lt;!(\/?)IoRangeIfExists&gt;/gm, css: 'xblockmark-condition' },
        { regex: /&lt;!(\/?)IoRangeSwitch&gt;/gm, css: 'xblockmark-condition' },
        { regex: /&lt;!(\/?)IoRangeConstraint&gt;/gm, css: 'xblockmark-constraint' },
        { regex: /&lt;!(\/?)IoRangeThen&gt;/gm, css: 'xblockmark' },
        { regex: /&lt;!(\/?)IoRangeElse&gt;/gm, css: 'xblockmark' },
        { regex: /&lt;!(\/?)IoRangeCase&gt;/gm, css: 'xblockmark' },
        { regex: /&lt;!(\/?)IoRangeFor&gt;/gm, css: 'xblockmark-loop' },
        { regex: /&lt;!(\/?)IoRangeForEach&gt;/gm, css: 'xblockmark-loop' },
        { regex: /&lt;!(\/?)IoRangeDo&gt;/gm, css: 'xblockmark' },
        { regex: /&lt;!(\/?)IoRangeComment&gt;/gm, css: 'xblockmark-comment' },
        { regex: /&lt;!(\/?)IoRangeDocumentation&gt;/gm, css: 'xblockmark-comment' },
        { regex: /&lt;!(\/?)IoRangeNoOutput&gt;/gm, css: 'xblockmark-comment' },
        { regex: /&lt;!(\/?)IoRangeImageList&gt;/gm, css: 'xblockmark' },
        { regex: /&lt;!(\/?)IoRangeInclude&gt;/gm, css: 'xblockmark-rendermode' },
        { regex: /&lt;!(\/?)IoRangeMath&gt;/gm, css: 'xblockmark-math' },
        { regex: /&lt;!(\/?)IoRangePreDefinition&gt;/gm, css: 'xblockmark-special' },
        { regex: /&lt;!(\/?)IoRangeTemp&gt;/gm, css: 'xblockmark-special' },
        { regex: /&lt;!(\/?)IoRangeSession&gt;/gm, css: 'xblockmark-special' },
        { regex: /&lt;!(\/?)IoRangeUiSession&gt;/gm, css: 'xblockmark-special' },
        { regex: /&lt;!(\/?)IoRangePreviewMode&gt;/gm, css: 'xblockmark-rendermode' },
        { regex: /&lt;!(\/?)IoRangeEditMode&gt;/gm, css: 'xblockmark-rendermode' },
        { regex: /&lt;!(\/?)IoRangeEditModeOn&gt;/gm, css: 'xblockmark-rendermode' },
        { regex: /&lt;!(\/?)IoRangeEditModeOff&gt;/gm, css: 'xblockmark-rendermode' },
        { regex: /&lt;!(\/?)IoRangePublishMode&gt;/gm, css: 'xblockmark-rendermode' },
        { regex: /&lt;!(\/?)IoRangeRDExecute&gt;/gm, css: 'xblockmark-rendermode' },
        { regex: /&lt;!(\/?)IoRangePreExecute&gt;/gm, css: 'xblockmark-rendermode' },

        { regex: /&lt;!(\/?)IoRangeBlocktyp&gt;/gm, css: 'xblockmark' },
        { regex: /&lt;!(\/?)IoRangeBack&gt;/gm, css: 'xblockmark-navigation' },
        { regex: /&lt;!(\/?)IoRangeBreadCrumb&gt;/gm, css: 'xblockmark-navigation' },
        { regex: /&lt;!(\/?)IoRangeConditional&gt;/gm, css: 'xblockmark-condition' },
        { regex: /&lt;!(\/?)IoRangeData&gt;/gm, css: 'xblockmark' },
        { regex: /&lt;!(\/?)IoRangeDragDrop&gt;/gm, css: 'xblockmark' },
        { regex: /&lt;!(\/?)IoRangeDynLink&gt;/gm, css: 'xblockmark' },
        { regex: /&lt;!(\/?)IoRangeHit&gt;/gm, css: 'xblockmark' },
        { regex: /&lt;!(\/?)IoRangeList&gt;/gm, css: 'xblockmark-loop' },
        { regex: /&lt;!(\/?)IoRangeRedDotMode&gt;/gm, css: 'xblockmark' },
        { regex: /&lt;!(\/?)IoRangeNoRedDotMode&gt;/gm, css: 'xblockmark' },
        { regex: /&lt;!(\/?)IoRangeRedDotEditOnly&gt;/gm, css: 'xblockmark' },
        { regex: /&lt;!(\/?)IoRangeNoEditMode&gt;/gm, css: 'xblockmark' },

        { regex: /&lt;!(\/?)IoRangeX(.+?)&gt;/gm, css: 'xblockmark' },
        { regex: /&lt;!IoRedDot(.+?)&gt;/gm, css: 'xsmartedit-wsm' },
        { regex: /&lt;%!!(.+?)!!%&gt;/gm, css: 'xrendertag-short' },
        { regex: /&lt;(\/?)reddot:cms&gt;/gm, css: 'xrendertag' },
        { regex: /&lt;navigation(.*?)&gt;/gm, css: 'xrendertag' },
        { regex: /&lt;(\/?)output(.*?)&gt;/gm, css: 'xrendertag' },
        { regex: /&lt;(\/?)foreach(.*?)&gt;/gm, css: 'xrendertag' },
        { regex: /&lt;(\/?)if&gt;/gm, css: 'xrendertag' },
        { regex: /&lt;(\/?)query(.*?)&gt;/gm, css: 'xrendertag' },
        { regex: /&lt;(\/?)htmltext&gt;/gm, css: 'xrendertag' },
        { regex: /&lt;(\/?)xmltext&gt;/gm, css: 'xrendertag' },
        { regex: /&lt;(\/?)currentPageCommentCount(.*?)&gt;/gm, css: 'xrendertag' },
        { regex: /&lt;(\/?)pagesMostCommented(.*?)&gt;/gm, css: 'xrendertag' }
    ];
};
SyntaxHighlighter.brushes.xwsm.prototype = new SyntaxHighlighter.Highlighter();
SyntaxHighlighter.brushes.xwsm.aliases = ['xwsm','xms'];